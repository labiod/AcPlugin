/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.kgb.lang.cpp.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.kgb.lang.cpp.psi.CppTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>CppLexer.flex</tt>
 */
public class CppLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14752 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\12\1\34\1\35\2\12\1\15\1\36\3\12\1\37\10\12\1\40\1\41\20\12\1\42"+
    "\2\12\1\43\4\12\1\44\1\45\1\46\3\12\1\47\1\50\1\51\3\12\51\15\1\52\3\15\1"+
    "\53\1\54\4\15\1\55\12\12\1\56\u02c1\12\1\57\277\12");

  /* The ZZ_CMAP_Y table has 3072 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13"+
    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31"+
    "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\3\13\1\40\2\13\1\41"+
    "\1\1\1\13\1\42\4\1\1\13\1\43\2\1\1\44\7\13\1\45\1\24\1\34\1\46\1\35\1\47\1"+
    "\50\1\51\1\45\1\16\1\52\1\46\1\35\1\53\1\54\1\55\1\56\1\57\1\60\1\22\1\35"+
    "\1\61\1\62\1\63\1\45\1\64\1\65\1\46\1\35\1\61\1\66\1\67\1\45\1\70\1\71\1\72"+
    "\1\73\1\33\1\74\1\75\1\56\1\1\1\76\1\77\1\35\1\100\1\101\1\102\1\45\1\1\1"+
    "\103\1\77\1\35\1\104\1\101\1\105\1\45\1\106\1\103\1\77\1\13\1\37\1\107\1\110"+
    "\1\45\1\111\1\112\1\113\1\13\1\114\1\115\1\116\1\56\1\117\1\24\2\13\1\31\1"+
    "\120\1\121\2\1\1\122\1\123\1\124\1\125\1\126\1\127\2\1\1\63\1\130\1\121\1"+
    "\131\1\132\1\13\1\133\1\24\1\134\1\132\1\13\1\133\1\135\3\1\4\13\1\121\4\13"+
    "\1\41\2\13\1\136\2\13\1\137\24\13\1\140\1\141\2\13\1\140\2\13\1\142\1\143"+
    "\1\14\3\13\1\143\3\13\1\37\2\1\1\13\1\1\5\13\1\144\1\24\45\13\1\36\1\13\1"+
    "\145\1\31\4\13\1\146\1\147\1\150\1\43\1\13\1\43\1\13\1\151\1\150\1\152\5\13"+
    "\1\153\1\121\1\1\1\154\1\121\5\13\1\26\2\13\1\31\4\13\1\57\1\13\1\120\2\42"+
    "\1\56\1\13\1\41\1\43\2\13\1\42\1\13\2\121\2\1\1\13\1\42\3\13\1\120\1\13\1"+
    "\36\2\121\1\155\1\120\4\1\4\13\1\42\1\121\1\156\1\151\7\13\1\151\3\13\1\26"+
    "\1\100\2\13\1\41\5\1\1\157\1\13\1\160\17\13\1\161\21\13\1\144\2\13\1\144\1"+
    "\162\1\13\1\41\3\13\1\163\1\164\1\165\1\133\1\164\1\166\1\1\1\167\1\170\1"+
    "\63\1\171\1\1\1\172\1\1\1\133\3\1\2\13\1\63\1\173\1\174\1\175\1\127\1\176"+
    "\1\1\2\13\1\147\62\1\1\56\2\13\1\121\161\1\2\13\1\120\2\13\1\120\10\13\1\177"+
    "\1\151\2\13\1\136\3\13\1\200\1\170\1\13\1\201\4\202\2\13\2\1\1\170\35\1\1"+
    "\203\1\1\1\24\1\204\1\24\4\13\1\205\1\24\4\13\1\137\1\206\1\13\1\41\1\24\4"+
    "\13\1\120\1\1\1\13\1\31\3\1\1\13\40\1\133\13\1\57\4\1\135\13\1\57\2\1\10\13"+
    "\1\133\4\1\2\13\1\41\20\13\1\133\1\13\1\42\1\1\3\13\1\207\7\13\1\16\1\1\1"+
    "\210\1\211\5\13\1\212\1\13\1\41\1\26\3\1\1\210\2\13\1\26\1\1\3\13\1\151\4"+
    "\13\1\43\1\121\1\13\1\213\2\13\1\41\2\13\1\151\1\13\1\133\4\13\1\214\1\121"+
    "\1\13\1\120\3\13\1\201\1\41\1\121\1\13\1\113\4\13\1\32\1\154\1\13\1\215\1"+
    "\216\1\217\1\202\2\13\1\137\1\57\7\13\1\220\1\121\72\13\1\151\1\13\1\221\2"+
    "\13\1\42\20\1\26\13\1\41\6\13\1\121\2\1\1\201\1\222\1\35\1\223\1\224\6\13"+
    "\1\16\1\1\1\44\25\13\1\41\1\1\4\13\1\211\2\13\1\26\2\1\1\42\1\13\1\1\1\13"+
    "\1\225\1\226\2\1\1\134\7\13\1\133\1\1\1\121\1\24\1\227\1\24\1\31\1\56\4\13"+
    "\1\120\1\230\1\231\2\1\1\232\1\13\1\14\1\233\2\41\2\1\7\13\1\31\4\1\3\13\1"+
    "\43\7\1\1\234\10\1\1\13\1\133\3\13\2\63\1\1\2\13\1\1\1\13\1\31\2\13\1\31\1"+
    "\13\1\41\2\13\1\235\1\236\2\1\11\13\1\41\1\121\5\1\2\13\1\26\3\13\1\151\11"+
    "\1\23\13\1\201\1\13\1\57\1\26\11\1\1\237\2\13\1\240\1\13\1\57\1\13\1\201\1"+
    "\13\1\120\4\1\1\13\1\241\1\13\1\57\1\13\1\121\4\1\3\13\1\242\4\1\1\243\1\244"+
    "\1\13\1\245\2\1\1\13\1\133\1\13\1\133\2\1\1\132\1\13\1\201\1\1\3\13\1\57\1"+
    "\13\1\57\1\13\1\32\1\13\1\16\6\1\4\13\1\147\3\1\3\13\1\32\3\13\1\32\60\1\4"+
    "\13\1\201\1\1\1\56\1\170\3\13\1\31\1\1\1\13\1\147\1\121\3\13\1\134\1\1\2\13"+
    "\1\246\4\13\1\247\1\250\2\1\1\13\1\22\1\13\1\26\4\1\1\251\1\27\1\147\3\13"+
    "\1\31\1\121\1\34\1\46\1\35\1\61\1\66\1\252\1\253\1\43\20\1\4\13\1\254\1\121"+
    "\12\1\3\13\1\255\1\63\1\256\2\1\4\13\1\257\1\121\2\1\3\13\1\26\1\121\3\1\1"+
    "\13\1\100\1\42\1\121\26\1\4\13\1\121\1\170\34\1\3\13\1\147\20\1\71\13\1\121"+
    "\6\1\6\13\1\120\1\1\14\13\1\151\53\1\2\13\1\120\75\1\44\13\1\201\33\1\43\13"+
    "\1\147\1\13\1\120\1\121\6\1\1\13\1\41\1\43\3\13\1\201\1\151\1\121\1\44\1\260"+
    "\1\13\67\1\4\13\1\43\2\13\1\120\1\170\1\13\6\1\1\16\77\1\6\13\1\31\1\133\1"+
    "\147\1\261\114\1\1\262\1\263\1\264\1\1\1\265\11\1\1\266\33\1\5\13\1\134\3"+
    "\13\1\150\1\267\1\270\1\271\3\13\1\272\1\273\1\13\1\274\1\275\1\77\24\13\1"+
    "\255\1\13\1\77\1\137\1\13\1\137\1\13\1\134\1\13\1\134\1\120\1\13\1\120\1\13"+
    "\1\35\1\13\1\35\1\13\1\276\3\13\40\1\3\13\1\221\2\13\1\133\1\277\1\300\1\156"+
    "\1\24\25\1\14\13\1\43\1\201\122\1\1\271\1\13\1\301\1\302\1\303\1\304\1\305"+
    "\1\306\1\307\1\42\1\310\1\42\47\1\1\13\1\121\1\13\1\121\1\13\1\121\47\1\55"+
    "\13\1\201\2\1\103\13\1\43\15\13\1\41\150\13\1\16\25\1\41\13\1\41\56\1\17\13"+
    "\41\1");

  /* The ZZ_CMAP_A table has 3216 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\10\4\2\22\0\1\10\1\0\1\6\1\56\2\0\1\33\1\14\1\22\1\23\1\5\1\0\1\32"+
    "\1\31\1\16\1\4\12\15\1\30\1\27\1\11\1\26\1\13\2\0\13\17\1\63\1\17\1\61\6\17"+
    "\1\62\5\17\1\24\1\7\1\25\1\0\1\17\1\0\1\47\1\52\1\54\1\50\1\53\1\46\1\45\1"+
    "\36\1\42\2\17\1\44\1\57\1\43\1\37\1\60\1\17\1\40\1\35\1\41\1\51\1\55\4\17"+
    "\1\20\1\0\1\21\1\34\6\0\1\1\12\0\1\3\11\0\1\12\12\0\1\12\4\0\1\12\5\0\27\12"+
    "\1\0\12\12\4\0\14\12\16\0\5\12\7\0\1\12\1\0\1\12\1\0\5\12\1\0\2\12\2\0\4\12"+
    "\1\0\1\12\6\0\1\12\1\0\3\12\1\0\1\12\1\0\4\12\1\0\23\12\1\0\11\12\1\0\26\12"+
    "\2\0\1\12\6\0\10\12\10\0\16\12\1\0\1\12\1\0\2\12\1\0\2\12\1\0\1\12\10\0\13"+
    "\12\5\0\3\12\15\0\12\12\4\0\6\12\1\0\10\12\2\0\12\12\1\0\23\12\2\0\14\12\2"+
    "\0\11\12\4\0\1\12\5\0\16\12\2\0\14\12\4\0\5\12\16\0\21\12\2\0\13\12\2\0\16"+
    "\12\1\0\1\12\3\0\4\12\2\0\11\12\2\0\2\12\2\0\4\12\10\0\1\12\4\0\2\12\1\0\1"+
    "\12\1\0\3\12\1\0\6\12\4\0\2\12\1\0\2\12\1\0\2\12\1\0\2\12\2\0\1\12\1\0\5\12"+
    "\4\0\2\12\2\0\3\12\3\0\1\12\7\0\4\12\1\0\1\12\7\0\20\12\13\0\3\12\1\0\11\12"+
    "\1\0\2\12\1\0\2\12\1\0\5\12\2\0\12\12\1\0\3\12\1\0\3\12\2\0\1\12\30\0\1\12"+
    "\7\0\3\12\1\0\10\12\2\0\6\12\2\0\2\12\2\0\3\12\10\0\2\12\4\0\2\12\1\0\1\12"+
    "\1\0\1\12\20\0\2\12\1\0\6\12\3\0\3\12\1\0\4\12\3\0\2\12\1\0\1\12\1\0\2\12"+
    "\3\0\2\12\3\0\3\12\3\0\5\12\3\0\3\12\1\0\4\12\2\0\1\12\6\0\1\12\10\0\4\12"+
    "\1\0\10\12\1\0\3\12\1\0\30\12\3\0\10\12\1\0\3\12\1\0\4\12\7\0\2\12\1\0\3\12"+
    "\6\0\3\12\1\0\10\12\1\0\6\12\1\0\5\12\2\0\4\12\5\0\2\12\7\0\1\12\2\0\2\12"+
    "\15\0\5\12\1\0\3\12\1\0\5\12\10\0\1\12\7\0\1\12\12\0\6\12\2\0\2\12\1\0\22"+
    "\12\3\0\10\12\1\0\11\12\1\0\1\12\2\0\7\12\3\0\1\12\4\0\6\12\1\0\1\12\1\0\10"+
    "\12\2\0\2\12\14\0\17\12\1\0\12\12\7\0\2\12\1\0\1\12\2\0\2\12\1\0\1\12\2\0"+
    "\1\12\6\0\4\12\1\0\7\12\1\0\3\12\1\0\1\12\1\0\1\12\2\0\2\12\1\0\15\12\1\0"+
    "\3\12\2\0\5\12\1\0\1\12\1\0\6\12\2\0\12\12\2\0\4\12\10\0\2\12\13\0\1\12\1"+
    "\0\1\12\1\0\1\12\4\0\12\12\1\0\24\12\3\0\5\12\1\0\12\12\6\0\1\12\11\0\6\12"+
    "\1\0\1\12\5\0\1\12\2\0\13\12\1\0\15\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12"+
    "\2\0\1\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0\16\12\2\0\6\12\2\0\1\3\32"+
    "\12\3\0\13\12\7\0\15\12\1\0\6\12\14\0\1\12\1\0\2\12\14\0\4\12\3\0\1\12\4\0"+
    "\2\12\15\0\3\12\11\0\1\12\23\0\10\12\1\0\23\12\1\0\2\12\6\0\6\12\6\0\14\12"+
    "\1\0\1\12\1\0\1\12\1\0\1\12\1\0\6\12\1\0\7\12\1\0\1\12\3\0\3\12\1\0\7\12\3"+
    "\0\4\12\2\0\6\12\4\0\13\3\15\0\2\1\5\0\1\3\17\0\1\12\4\0\1\12\12\0\1\3\1\0"+
    "\1\12\15\0\1\12\2\0\1\12\4\0\1\12\2\0\12\12\1\0\1\12\3\0\5\12\6\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\4\12\1\0\1\12\5\0\5\12\4\0\1\12\1\0\5\12\6\0\15\12\7\0"+
    "\10\12\11\0\7\12\1\0\7\12\1\0\1\3\4\0\3\12\11\0\5\12\2\0\5\12\3\0\7\12\2\0"+
    "\2\12\2\0\3\12\5\0\16\12\1\0\12\12\1\0\1\12\7\0\11\12\2\0\27\12\2\0\15\12"+
    "\3\0\1\12\1\0\1\12\2\0\1\12\16\0\1\12\2\0\5\12\12\0\6\12\2\0\6\12\2\0\6\12"+
    "\11\0\13\12\1\0\2\12\2\0\7\12\4\0\5\12\3\0\5\12\5\0\12\12\1\0\5\12\1\0\1\12"+
    "\1\0\2\12\1\0\2\12\1\0\12\12\3\0\2\12\30\0\16\12\4\0\1\12\2\0\6\12\2\0\6\12"+
    "\2\0\6\12\2\0\3\12\3\0\14\12\1\0\16\12\1\0\2\12\1\0\1\12\15\0\1\12\2\0\4\12"+
    "\4\0\10\12\1\0\5\12\12\0\6\12\2\0\1\12\1\0\14\12\1\0\2\12\3\0\1\12\2\0\4\12"+
    "\1\0\2\12\12\0\10\12\6\0\6\12\1\0\2\12\5\0\10\12\1\0\3\12\1\0\13\12\4\0\3"+
    "\12\4\0\5\12\2\0\1\12\11\0\5\12\5\0\3\12\3\0\13\12\1\0\1\12\3\0\7\12\1\0\1"+
    "\12\1\0\4\12\1\0\2\12\6\0\1\12\5\0\7\12\2\0\7\12\3\0\6\12\1\0\1\12\10\0\6"+
    "\12\2\0\10\12\10\0\6\12\2\0\1\12\3\0\1\12\13\0\10\12\5\0\15\12\3\0\2\12\6"+
    "\0\5\12\3\0\6\12\10\0\10\12\2\0\7\12\16\0\4\12\4\0\3\12\15\0\1\12\2\0\2\12"+
    "\2\0\4\12\1\0\14\12\1\0\1\12\1\0\7\12\1\0\21\12\1\0\4\12\2\0\10\12\1\0\7\12"+
    "\1\0\14\12\1\0\4\12\1\0\5\12\1\0\1\12\3\0\11\12\1\0\10\12\2\0\2\12\5\0\1\12"+
    "\16\0\1\12\14\0\2\12\1\0\1\12\2\0\1\12\1\0\12\12\1\0\4\12\1\0\1\12\1\0\1\12"+
    "\6\0\1\12\4\0\1\12\1\0\1\12\1\0\1\12\1\0\3\12\1\0\2\12\1\0\1\12\2\0\1\12\1"+
    "\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\2\12\1\0\1\12\2\0\4\12\1\0\7\12\1\0"+
    "\4\12\1\0\4\12\1\0\1\12\1\0\12\12\1\0\5\12\1\0\3\12\1\0\5\12\1\0\5\12");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\1\1\23\1\24"+
    "\1\25\15\11\1\1\2\11\1\0\1\26\2\0\1\27"+
    "\1\0\1\30\1\31\2\0\1\32\1\7\1\33\1\34"+
    "\1\35\5\11\1\36\15\11\3\0\3\11\2\0\5\11"+
    "\1\37\15\11\1\0\1\40\3\0\3\11\1\41\1\42"+
    "\4\11\1\43\1\11\1\44\4\11\1\45\1\46\1\47"+
    "\2\11\1\50\1\11\5\0\2\11\1\51\1\52\4\11"+
    "\1\53\1\54\1\11\1\55\1\56\1\57\1\11\3\0"+
    "\1\60\1\61\2\11\1\62\1\63\1\64\1\11\1\65"+
    "\1\11\2\0\1\66\1\11\1\67\1\11\1\70\1\0"+
    "\1\71\1\72\1\11\1\73\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\64\0\150\0\234\0\64\0\320\0\u0104"+
    "\0\u0138\0\u016c\0\u01a0\0\64\0\u01d4\0\64\0\64\0\64"+
    "\0\64\0\u0208\0\64\0\64\0\64\0\u023c\0\u0270\0\64"+
    "\0\64\0\64\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8"+
    "\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548"+
    "\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c\0\320\0\64\0\u0680"+
    "\0\64\0\64\0\u016c\0\u06b4\0\64\0\u06e8\0\64\0\64"+
    "\0\64\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u01d4\0\u0820"+
    "\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0"+
    "\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60"+
    "\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00"+
    "\0\u0d34\0\u01d4\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c"+
    "\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c"+
    "\0\64\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144\0\64"+
    "\0\64\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u01d4\0\u1248\0\u01d4"+
    "\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u01d4\0\u01d4\0\u01d4\0\u134c"+
    "\0\u1380\0\u01d4\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8"+
    "\0\u14ec\0\u1520\0\u01d4\0\u01d4\0\u1554\0\u1588\0\u15bc\0\u15f0"+
    "\0\u01d4\0\u01d4\0\u1624\0\u01d4\0\u01d4\0\u01d4\0\u1658\0\u168c"+
    "\0\u16c0\0\u16f4\0\64\0\64\0\u1728\0\u175c\0\u01d4\0\u01d4"+
    "\0\u01d4\0\u1790\0\u01d4\0\u17c4\0\u17f8\0\u182c\0\64\0\u1860"+
    "\0\u01d4\0\u1894\0\u01d4\0\u18c8\0\64\0\u01d4\0\u18fc\0\64"+
    "\0\u01d4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\2"+
    "\1\4\1\10\1\2\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\2\15\1\34"+
    "\1\35\1\36\1\37\1\40\1\15\1\41\1\15\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\15\1\51"+
    "\1\52\2\15\75\0\1\53\56\0\1\54\1\55\56\0"+
    "\6\56\1\57\1\60\54\56\11\0\1\61\65\0\1\62"+
    "\50\0\7\63\1\64\4\63\1\65\47\63\15\0\1\13"+
    "\1\66\62\0\1\15\1\0\1\15\15\0\21\15\1\0"+
    "\5\15\25\0\1\67\66\0\1\70\46\0\1\71\65\0"+
    "\1\15\1\0\1\15\15\0\1\15\1\72\2\15\1\73"+
    "\14\15\1\0\5\15\15\0\1\15\1\0\1\15\15\0"+
    "\16\15\1\74\2\15\1\0\5\15\15\0\1\15\1\0"+
    "\1\15\15\0\3\15\1\75\15\15\1\0\5\15\15\0"+
    "\1\15\1\0\1\15\15\0\6\15\1\76\2\15\1\77"+
    "\7\15\1\0\5\15\15\0\1\15\1\0\1\15\15\0"+
    "\12\15\1\100\6\15\1\0\5\15\15\0\1\15\1\0"+
    "\1\15\15\0\2\15\1\101\16\15\1\0\5\15\15\0"+
    "\1\15\1\0\1\15\15\0\7\15\1\102\2\15\1\103"+
    "\6\15\1\0\5\15\15\0\1\15\1\0\1\15\15\0"+
    "\2\15\1\104\16\15\1\0\5\15\15\0\1\15\1\0"+
    "\1\15\15\0\1\105\20\15\1\0\5\15\15\0\1\15"+
    "\1\0\1\15\15\0\2\15\1\106\16\15\1\0\5\15"+
    "\15\0\1\15\1\0\1\15\15\0\7\15\1\107\11\15"+
    "\1\0\5\15\15\0\1\15\1\0\1\15\15\0\1\15"+
    "\1\110\1\111\4\15\1\112\11\15\1\0\5\15\15\0"+
    "\1\15\1\0\1\15\15\0\2\15\1\113\2\15\1\114"+
    "\13\15\1\0\5\15\42\0\1\115\5\0\1\116\2\0"+
    "\1\117\25\0\1\15\1\0\1\15\15\0\3\15\1\120"+
    "\10\15\1\121\4\15\1\0\5\15\15\0\1\15\1\0"+
    "\1\15\15\0\21\15\1\0\3\15\1\122\1\15\1\0"+
    "\4\123\2\0\2\123\1\0\1\123\2\0\3\123\15\0"+
    "\21\123\1\0\5\123\1\54\2\0\61\54\5\55\1\124"+
    "\56\55\1\56\2\0\61\56\1\63\2\0\61\63\15\0"+
    "\1\66\63\0\1\15\1\0\1\15\15\0\2\15\1\125"+
    "\16\15\1\0\5\15\15\0\1\15\1\0\1\15\15\0"+
    "\3\15\1\126\6\15\1\127\6\15\1\0\5\15\15\0"+
    "\1\15\1\0\1\15\15\0\4\15\1\130\14\15\1\0"+
    "\5\15\15\0\1\15\1\0\1\15\15\0\14\15\1\131"+
    "\4\15\1\0\5\15\15\0\1\15\1\0\1\15\15\0"+
    "\4\15\1\132\14\15\1\0\5\15\15\0\1\15\1\0"+
    "\1\15\15\0\21\15\1\0\1\133\4\15\15\0\1\15"+
    "\1\0\1\15\15\0\6\15\1\134\12\15\1\0\5\15"+
    "\15\0\1\15\1\0\1\15\15\0\2\15\1\135\16\15"+
    "\1\0\5\15\15\0\1\15\1\0\1\15\15\0\7\15"+
    "\1\136\11\15\1\0\5\15\15\0\1\15\1\0\1\15"+
    "\15\0\14\15\1\137\4\15\1\0\5\15\15\0\1\15"+
    "\1\0\1\15\15\0\5\15\1\140\13\15\1\0\5\15"+
    "\15\0\1\15\1\0\1\15\15\0\2\15\1\141\16\15"+
    "\1\0\5\15\15\0\1\15\1\0\1\15\15\0\1\142"+
    "\20\15\1\0\5\15\15\0\1\15\1\0\1\15\15\0"+
    "\12\15\1\143\6\15\1\0\5\15\15\0\1\15\1\0"+
    "\1\15\15\0\6\15\1\144\12\15\1\0\5\15\15\0"+
    "\1\15\1\0\1\15\15\0\12\15\1\145\6\15\1\0"+
    "\5\15\15\0\1\15\1\0\1\15\15\0\5\15\1\146"+
    "\13\15\1\0\5\15\15\0\1\15\1\0\1\15\15\0"+
    "\3\15\1\147\15\15\1\0\5\15\43\0\1\150\2\0"+
    "\1\151\70\0\1\152\53\0\1\153\1\154\34\0\1\15"+
    "\1\0\1\15\15\0\5\15\1\155\13\15\1\0\5\15"+
    "\15\0\1\15\1\0\1\15\15\0\15\15\1\156\3\15"+
    "\1\0\5\15\15\0\1\15\1\0\1\15\15\0\21\15"+
    "\1\0\4\15\1\157\1\0\4\123\2\0\2\123\1\0"+
    "\1\123\1\160\1\0\3\123\15\0\21\123\1\0\5\123"+
    "\4\55\1\161\1\124\56\55\15\0\1\15\1\0\1\15"+
    "\15\0\3\15\1\162\15\15\1\0\5\15\15\0\1\15"+
    "\1\0\1\15\15\0\14\15\1\163\4\15\1\0\5\15"+
    "\15\0\1\15\1\0\1\15\15\0\4\15\1\164\14\15"+
    "\1\0\5\15\15\0\1\15\1\0\1\15\15\0\14\15"+
    "\1\165\4\15\1\0\5\15\15\0\1\15\1\0\1\15"+
    "\15\0\16\15\1\166\2\15\1\0\5\15\15\0\1\15"+
    "\1\0\1\15\15\0\16\15\1\167\2\15\1\0\5\15"+
    "\15\0\1\15\1\0\1\15\15\0\10\15\1\170\10\15"+
    "\1\0\5\15\15\0\1\15\1\0\1\15\15\0\12\15"+
    "\1\171\6\15\1\0\5\15\15\0\1\15\1\0\1\15"+
    "\15\0\1\172\20\15\1\0\5\15\15\0\1\15\1\0"+
    "\1\15\15\0\15\15\1\173\3\15\1\0\5\15\15\0"+
    "\1\15\1\0\1\15\15\0\6\15\1\174\12\15\1\0"+
    "\5\15\15\0\1\15\1\0\1\15\15\0\7\15\1\175"+
    "\11\15\1\0\5\15\15\0\1\15\1\0\1\15\15\0"+
    "\16\15\1\176\2\15\1\0\5\15\15\0\1\15\1\0"+
    "\1\15\15\0\3\15\1\177\15\15\1\0\5\15\15\0"+
    "\1\15\1\0\1\15\15\0\1\200\20\15\1\0\5\15"+
    "\15\0\1\15\1\0\1\15\15\0\1\201\20\15\1\0"+
    "\5\15\15\0\1\15\1\0\1\15\15\0\13\15\1\202"+
    "\5\15\1\0\5\15\15\0\1\15\1\0\1\15\15\0"+
    "\4\15\1\203\14\15\1\0\5\15\54\0\1\204\55\0"+
    "\1\205\65\0\1\206\50\0\1\207\4\0\1\210\36\0"+
    "\1\15\1\0\1\15\15\0\20\15\1\211\1\0\5\15"+
    "\15\0\1\15\1\0\1\15\15\0\7\15\1\212\11\15"+
    "\1\0\5\15\15\0\1\15\1\0\1\15\15\0\21\15"+
    "\1\0\4\15\1\213\15\0\1\15\1\0\1\15\15\0"+
    "\4\15\1\214\14\15\1\0\5\15\15\0\1\15\1\0"+
    "\1\15\15\0\17\15\1\215\1\15\1\0\5\15\15\0"+
    "\1\15\1\0\1\15\15\0\5\15\1\216\13\15\1\0"+
    "\5\15\15\0\1\15\1\0\1\15\15\0\3\15\1\217"+
    "\15\15\1\0\5\15\15\0\1\15\1\0\1\15\15\0"+
    "\1\220\20\15\1\0\5\15\15\0\1\15\1\0\1\15"+
    "\15\0\4\15\1\221\14\15\1\0\5\15\15\0\1\15"+
    "\1\0\1\15\15\0\16\15\1\222\2\15\1\0\5\15"+
    "\15\0\1\15\1\0\1\15\15\0\7\15\1\223\11\15"+
    "\1\0\5\15\15\0\1\15\1\0\1\15\15\0\10\15"+
    "\1\224\10\15\1\0\5\15\15\0\1\15\1\0\1\15"+
    "\15\0\4\15\1\225\14\15\1\0\5\15\15\0\1\15"+
    "\1\0\1\15\15\0\1\226\20\15\1\0\5\15\15\0"+
    "\1\15\1\0\1\15\15\0\14\15\1\227\4\15\1\0"+
    "\5\15\44\0\1\230\61\0\1\231\63\0\1\232\74\0"+
    "\1\233\56\0\1\234\32\0\1\15\1\0\1\15\15\0"+
    "\12\15\1\235\6\15\1\0\5\15\15\0\1\15\1\0"+
    "\1\15\15\0\5\15\1\236\13\15\1\0\5\15\15\0"+
    "\1\15\1\0\1\15\15\0\4\15\1\237\14\15\1\0"+
    "\5\15\15\0\1\15\1\0\1\15\15\0\17\15\1\240"+
    "\1\15\1\0\5\15\15\0\1\15\1\0\1\15\15\0"+
    "\6\15\1\241\12\15\1\0\5\15\15\0\1\15\1\0"+
    "\1\15\15\0\21\15\1\0\1\15\1\242\3\15\15\0"+
    "\1\15\1\0\1\15\15\0\16\15\1\243\2\15\1\0"+
    "\5\15\15\0\1\15\1\0\1\15\15\0\12\15\1\244"+
    "\6\15\1\0\5\15\51\0\1\245\55\0\1\246\66\0"+
    "\1\247\32\0\1\15\1\0\1\15\15\0\4\15\1\250"+
    "\14\15\1\0\5\15\15\0\1\15\1\0\1\15\15\0"+
    "\17\15\1\251\1\15\1\0\5\15\15\0\1\15\1\0"+
    "\1\15\15\0\12\15\1\252\6\15\1\0\5\15\15\0"+
    "\1\15\1\0\1\15\15\0\7\15\1\253\11\15\1\0"+
    "\5\15\50\0\1\254\66\0\1\255\25\0\1\15\1\0"+
    "\1\15\15\0\16\15\1\256\2\15\1\0\5\15\15\0"+
    "\1\15\1\0\1\15\15\0\17\15\1\257\1\15\1\0"+
    "\5\15\53\0\1\260\25\0\1\15\1\0\1\15\15\0"+
    "\16\15\1\261\2\15\1\0\5\15";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6448];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\5\1\1\11\1\1\4\11"+
    "\1\1\3\11\2\1\3\11\20\1\1\0\1\1\2\0"+
    "\1\11\1\0\2\11\2\0\1\11\1\1\3\11\23\1"+
    "\3\0\3\1\2\0\23\1\1\0\1\11\3\0\3\1"+
    "\2\11\22\1\5\0\17\1\3\0\2\11\10\1\2\0"+
    "\1\11\4\1\1\0\1\11\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[177];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public CppLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CppLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 61: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 62: break;
          case 3: 
            { return CPP_POINTER;
            }
          case 63: break;
          case 4: 
            { return CPP_APOS;
            }
          case 64: break;
          case 5: 
            { return CPP_LB4;
            }
          case 65: break;
          case 6: 
            { return CPP_RB4;
            }
          case 66: break;
          case 7: 
            { return CPP_NUMBER;
            }
          case 67: break;
          case 8: 
            { return CPP_DOT;
            }
          case 68: break;
          case 9: 
            { return CPP_KEY_NAME;
            }
          case 69: break;
          case 10: 
            { return CPP_LB;
            }
          case 70: break;
          case 11: 
            { return CPP_RB;
            }
          case 71: break;
          case 12: 
            { return CPP_LB2;
            }
          case 72: break;
          case 13: 
            { return CPP_RB2;
            }
          case 73: break;
          case 14: 
            { return CPP_LB3;
            }
          case 74: break;
          case 15: 
            { return CPP_RB3;
            }
          case 75: break;
          case 16: 
            { return CPP_EQ;
            }
          case 76: break;
          case 17: 
            { return CPP_SEMICOLON;
            }
          case 77: break;
          case 18: 
            { return CPP_COLON;
            }
          case 78: break;
          case 19: 
            { return CPP_COMMA;
            }
          case 79: break;
          case 20: 
            { return CPP_REFERENCE;
            }
          case 80: break;
          case 21: 
            { return CPP_DESTRUCTOR_KEY;
            }
          case 81: break;
          case 22: 
            { return CPP_LINE_COMMENTS;
            }
          case 82: break;
          case 23: 
            { return CPP_STRING_PATTERN;
            }
          case 83: break;
          case 24: 
            { return CPP_OUT;
            }
          case 84: break;
          case 25: 
            { return CPP_IN;
            }
          case 85: break;
          case 26: 
            { return CPP_CHAR;
            }
          case 86: break;
          case 27: 
            { return CPP_TABLE;
            }
          case 87: break;
          case 28: 
            { return CPP_VAR_ACCESSOR;
            }
          case 88: break;
          case 29: 
            { return CPP_POINTER_CALL;
            }
          case 89: break;
          case 30: 
            { return CPP_IF_KEYWORD;
            }
          case 90: break;
          case 31: 
            { return CPP_INT_TYPE;
            }
          case 91: break;
          case 32: 
            { return CPP_PRECOMPILER_IF_KEY;
            }
          case 92: break;
          case 33: 
            { return CPP_INCLUDE_PATH;
            }
          case 93: break;
          case 34: 
            { return CPP_MULTILINE_COMMENT;
            }
          case 94: break;
          case 35: 
            { return CPP_TRUE;
            }
          case 95: break;
          case 36: 
            { return CPP_LONG_TYPE;
            }
          case 96: break;
          case 37: 
            { return CPP_BOOL_TYPE;
            }
          case 97: break;
          case 38: 
            { return CPP_ELSE_KEYWORD;
            }
          case 98: break;
          case 39: 
            { return CPP_CHAR_TYPE;
            }
          case 99: break;
          case 40: 
            { return CPP_VOID_TYPE;
            }
          case 100: break;
          case 41: 
            { return CPP_NULL_KEYWORD;
            }
          case 101: break;
          case 42: 
            { return CPP_SHORT_TYPE;
            }
          case 102: break;
          case 43: 
            { return CPP_FLOAT_TYPE;
            }
          case 103: break;
          case 44: 
            { return CPP_FALSE;
            }
          case 104: break;
          case 45: 
            { return CPP_USING_KEYWORD;
            }
          case 105: break;
          case 46: 
            { return CPP_CONST;
            }
          case 106: break;
          case 47: 
            { return CPP_CLASS_KEYWORD;
            }
          case 107: break;
          case 48: 
            { return CPP_PRECOMPILER_ELSE_KEY;
            }
          case 108: break;
          case 49: 
            { return CPP_PRECOMPILER_ELIF_KEY;
            }
          case 109: break;
          case 50: 
            { return CPP_STRUCT_KEYWORD;
            }
          case 110: break;
          case 51: 
            { return CPP_STATIC;
            }
          case 111: break;
          case 52: 
            { return CPP_RETURN_KEYWORD;
            }
          case 112: break;
          case 53: 
            { return CPP_DOUBLE_TYPE;
            }
          case 113: break;
          case 54: 
            { return CPP_PRECOMPILER_ENDIF_KEY;
            }
          case 114: break;
          case 55: 
            { return CPP_PUBLIC_KEYWORD;
            }
          case 115: break;
          case 56: 
            { return CPP_VIRTUAL;
            }
          case 116: break;
          case 57: 
            { return CPP_PRECOMPILER_DEFINE_KEY;
            }
          case 117: break;
          case 58: 
            { return CPP_PRIVATE_KEYWORD;
            }
          case 118: break;
          case 59: 
            { return CPP_INCLUDE_KEYWORD;
            }
          case 119: break;
          case 60: 
            { return CPP_NAMESPACE_KEYWORD;
            }
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
